<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
if(!audio_is_playing(snd_bg_music)) audio_play_sound(snd_bg_music,1,1);

spd = 1;
hspd = 0;
vspd = 0;
var left = keyboard_check(vk_left);
var right = keyboard_check(vk_right);
var up = keyboard_check(vk_up);
var down = keyboard_check(vk_down);

gamepad_set_axis_deadzone(0, .3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var left = keyboard_check(vk_left) || (gamepad_axis_value(0,gp_axislh) &lt; 0);
var right = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
var up = keyboard_check(vk_up) || (gamepad_axis_value(0,gp_axislv) &lt; 0);
var down = keyboard_check(vk_down) || (gamepad_axis_value(0,gp_axislv) &gt; 0);
var attack = mouse_check_button_pressed(mb_left) || (gamepad_button_check_pressed(0, gp_face1));
// Moving right
if (right) {
    hspd = spd;
    image_xscale = 1;
} else

// Moving left
if (left) {
    hspd = -spd;
    image_xscale = -1;
} else {
    hspd = 0;
}

// Moving up
if(up) {
    vspd = -spd;
    image_yscale = -1;
} else

// Moving down
if(down) {
    vspd = spd;
    image_yscale = 1;
} else {
    vspd = 0;
}

// Horizontal collisions
if (place_meeting(x+hspd, y, obj_solid)) {
    while (!place_meeting(x+sign(hspd), y, obj_solid)) {
        x+= sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collisions
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

// Move vertically
y += vspd;

//image_angle = point_direction(x,y,mouse_x,mouse_y)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_key">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.keys += 1;
audio_play_sound(snd_pickup,1,false);
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door_locked">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.locked &amp;&amp; global.keys &gt; 0) {
    with(other) locked = false;
    global.keys -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(gamepad_is_connected(0) == true) {
var dis = point_distance(x, y, mouse_x, mouse_y);
dis = min(dis, 50); // max 50 pixels away
var dir = point_direction(x, y, mouse_x, mouse_y);
var angle = point_direction(x, y,mouse_x,mouse_y);
//draw_sprite_ext(spr_attack_dir, 0, x+lengthdir_x(30, dir), y+lengthdir_y(30, dir),1,1,angle,c_white,0.33);
} else {
var haxis = gamepad_axis_value(0, gp_axisrh);
var vaxis = gamepad_axis_value(0, gp_axisrv);
var dir = point_distance(0, 0, haxis, vaxis)*10;
dis = 50;
//draw_sprite_ext(spr_attack_dir, 0, x+lengthdir_x(dis, dir), y+lengthdir_y(dis, dir),1,1,dir,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
